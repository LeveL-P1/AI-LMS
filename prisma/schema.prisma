// SkillSyncAI Database Schema - Enhanced for Supabase
// This keeps your current working schema while adding Supabase optimizations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student relations
  enrollments  Enrollment[]
  quizAttempts QuizAttempt[]
  assignments  AssignmentSubmission[]

  // Instructor relations
  createdCourses Course[]

  @@map("users")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Course {
  id           String   @id @default(cuid())
  title        String
  description  String?
  imageUrl     String?
  price        Float?
  isPublished  Boolean  @default(false)
  categoryId   String?
  instructorId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  instructor  User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  category    Category?    @relation(fields: [categoryId], references: [id])
  chapters    Chapter[]
  enrollments Enrollment[]
  quizzes     Quiz[]

  @@index([categoryId])
  @@index([instructorId])
  @@map("courses")
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]

  @@map("categories")
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
  @@map("chapters")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  courseId    String
  timeLimit   Int? // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@index([courseId])
  @@map("quizzes")
}

model QuizQuestion {
  id            String   @id @default(cuid())
  question      String
  options       Json // Store as JSON array
  correctAnswer String
  quizId        String
  createdAt     DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  answers   Json // Store user answers as JSON
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@map("quiz_attempts")
}

model Assignment {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  courseId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  userId       String
  assignmentId String
  fileUrl      String?
  content      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assignmentId])
  @@index([assignmentId])
  @@map("assignment_submissions")
}

// Note: We'll add AI features (from schema-skillsyncai.prisma) gradually in upcoming phases
// This keeps your current working setup stable while we build new features