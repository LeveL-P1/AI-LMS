generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  role        UserRole @default(STUDENT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Student relations
  enrollments     Enrollment[]
  quizAttempts    QuizAttempt[]
  assignments     AssignmentSubmission[]
  
  // Instructor relations
  createdCourses  Course[]
  
  @@map("users")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  categoryId  String?
  instructorId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructor   User         @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id])
  chapters     Chapter[]
  enrollments  Enrollment[]
  quizzes      Quiz[]

  @@index([categoryId])
  @@index([instructorId])
  @@map("courses")
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]

  @@map("categories")
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]

  @@index([courseId])
  @@map("chapters")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
  @@map("user_progress")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  courseId    String
  timeLimit   Int?     // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions QuizQuestion[]
  attempts  QuizAttempt[]

  @@index([courseId])
  @@map("quizzes")
}

model QuizQuestion {
  id            String   @id @default(cuid())
  question      String
  options       Json     // Store as JSON array
  correctAnswer String
  quizId        String
  createdAt     DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@map("quiz_questions")
}

model QuizAttempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Float
  answers   Json     // Store user answers as JSON
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@map("quiz_attempts")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String   @id @default(cuid())
  userId       String
  assignmentId String
  fileUrl      String?
  content      String?
  grade        Float?
  feedback     String?
  submittedAt  DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assignmentId])
  @@index([assignmentId])
  @@map("assignment_submissions")
}














OLD 






generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  role        Role         @default(STUDENT)
  courses     Course[]     @relation("InstructorCourses")
  enrollments Enrollment[]
  submissions Submission[]
  progress    Progress[]
  createdAt   DateTime     @default(now())
}

model Course {
  id           String       @id @default(cuid())
  title        String
  description  String?
  category     String?
  price        Float        @default(0)
  published    Boolean      @default(false)
  instructor   User         @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String
  lessons      Lesson[]
  enrollments  Enrollment[]
  assignments  Assignment[]
  createdAt    DateTime     @default(now())
}

model Lesson {
  id        String     @id @default(cuid())
  title     String
  content   String?
  videoUrl  String?
  order     Int        @default(0)
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime   @default(now())
  progress  Progress[]
}

model Enrollment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  content     String?
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    String
  submissions Submission[]
  createdAt   DateTime     @default(now())
}

model Submission {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  student      User       @relation(fields: [studentId], references: [id])
  studentId    String
  content      String
  grade        Int?
  submittedAt  DateTime   @default(now())
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  completed Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@unique([userId, lessonId])
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}








seed.ts


import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function main() {
  // Create users
  const instructor = await prisma.user.create({
    data: {
      email: 'instructor@example.com',
      name: 'Instructor One',
      role: 'INSTRUCTOR',
    },
  });

  const student = await prisma.user.create({
    data: {
      email: 'student@example.com',
      name: 'Student One',
      role: 'STUDENT',
    },
  });

  // Create course
  const course = await prisma.course.create({
    data: {
      title: 'Intro to Web Dev',
      description: 'HTML, CSS, JavaScript fundamentals',
      instructorId: instructor.id,
    },
  });

  // Enroll student in course
  await prisma.enrollment.create({
    data: {
      userId: student.id,
      courseId: course.id,
    },
  });

  // Create lessons
  const lesson1 = await prisma.lesson.create({
    data: {
      title: 'HTML Basics',
      content: 'Introduction to HTML elements and structure.',
      videoUrl: 'https://example.com/html',
      courseId: course.id,
    },
  });

  const lesson2 = await prisma.lesson.create({
    data: {
      title: 'CSS Basics',
      content: 'Styling elements with CSS.',
      videoUrl: 'https://example.com/css',
      courseId: course.id,
    },
  });

  // Create assignment
  const assignment = await prisma.assignment.create({
    data: {
      title: 'Build a basic webpage',
      content: 'Create an HTML page using learned concepts.',
      courseId: course.id,
    },
  });

  // Create submission by student
  await prisma.submission.create({
    data: {
      assignmentId: assignment.id,
      studentId: student.id,
      content: '<html><body>Hello World</body></html>',
      grade: 95,
    },
  });

  // Create progress
  await prisma.progress.create({
    data: {
      userId: student.id,
      lessonId: lesson1.id,
      completed: true,
    },
  });

  await prisma.progress.create({
    data: {
      userId: student.id,
      lessonId: lesson2.id,
      completed: false,
    },
  });

  console.log('âœ… Seed complete');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
